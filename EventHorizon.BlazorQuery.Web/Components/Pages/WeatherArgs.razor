@page "/weather-args"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WeatherForecastApi WeatherApi

<PageTitle>Weather - Long Loading</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service, using the
    <code>@("<BlazorQuery />")</code> component.
</p>

<div>
    <button @onclick="() => SetPageSize(1)">Page Size 1</button>
    <button @onclick="() => SetPageSize(10)">Page Size 10</button>
    <button @onclick="() => SetPageSize(20)">Page Size 20</button>
</div>

<BlazorQuery DataQuery="WeatherApi.GetWeather" Args="@maxItems">
    <LoadingTemplate>
        <p><em>Loading...</em></p>
    </LoadingTemplate>
    <ErrorTemplate>
        <p><em>An error occurred loading the data.</em></p>
        <p>@context.ErrorMessage</p>
    </ErrorTemplate>
    <ChildContent>
        <h2>Weather forecast</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in context.Data)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    </ChildContent>
</BlazorQuery>

@code {
    private int maxItems = 10;

    private void SetPageSize(int pageSize)
    {
        maxItems = pageSize;
    }
}